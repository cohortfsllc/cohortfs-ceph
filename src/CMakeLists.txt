include(GetGitRevisionDescription)

add_definitions("-DCEPH_LIBDIR=${LIBRARY_OUTPUT_PATH}")
add_definitions("-DCEPH_PKGLIBDIR=\"${CMAKE_INSTALL_PREFIX}/lib\"")
add_definitions("-DHAVE_CONFIG_H -D__CEPH__ -D_FILE_OFFSET_BITS=64 -D_REENTRANT -D_THREAD_SAFE -D__STDC_FORMAT_MACROS -D_GNU_SOURCE")

set(CLIKE_COMMON_FLAGS "-Wall -Wtype-limits -Wignored-qualifiers -Winit-self -Wpointer-arith -Werror=format-security -fno-strict-aliasing -fsigned-char -fPIC")

if(${WITH_SQUEAKY_CLEAN_VALGRIND})
  set(CLIKE_COMMON_FLAGS "${CLIKE_COMMON_FLAGS} -DSQUEAKY_CLEAN_VALGRIND=1")
endif(${WITH_SQUEAKY_CLEAN_VALGRIND})

set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${CLIKE_COMMON_FLAGS} -std=c11")

set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${CLIKE_COMMON_FLAGS} -std=c++11 -Wnon-virtual-dtor -Wno-invalid-offsetof -Wno-unused-private-field -Wno-mismatched-tags")


set(EXTRALIBS rt dl)
if(${WITH_PROFILER})
  list(APPEND EXTRALIBS profiler)
endif(${WITH_PROFILER})

if (HAVE_XIO)
  include_directories(${Xio_INCLUDE_DIR})
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -I${Xio_INCLUDE_DIR}")
  list(APPEND EXTRALIBS ${Xio_LIBRARY} ibverbs rdmacm pthread rt)
endif(HAVE_XIO)


if(HAVE_CDS)
  list(APPEND EXTRALIBS ${CDS_LIBS})
endif(HAVE_CDS)

if (HAVE_LTTNG)
  list(APPEND EXTRALIBS ${LTTNG_UST_LIBRARY})
endif(HAVE_LTTNG)

set(CRYPTO_LIBS cryptopp)

set(GCOV_PREFIX_STRIP 4)

get_git_head_revision(GIT_REFSPEC CEPH_GIT_VER)
git_describe(CEPH_GIT_NICE_VER --always)

# Python stuff
find_package(PythonInterp 2 QUIET)
if(NOT PYTHONINTERP_FOUND)
  message(FATAL_ERROR "Python 2 interpreter not found.")
endif(NOT PYTHONINTERP_FOUND)

# if CMAKE_INSTALL_PREFIX is an empty string, must replace
# it with "/" to make PYTHON_INSTALL_TEMPLATE an absolute path to be
# consistent with all other installation paths.
if(CMAKE_INSTALL_PREFIX)
  set(PYTHON_INSTALL_TEMPLATE "${CMAKE_INSTALL_PREFIX}")
else(CMAKE_INSTALL_PREFIX)
  set(PYTHON_INSTALL_TEMPLATE "/")
endif(CMAKE_INSTALL_PREFIX)

execute_process(
  COMMAND
  ${PYTHON_EXECUTABLE} -c "from distutils import sysconfig; print sysconfig.get_python_lib(1,0,prefix='${PYTHON_INSTALL_TEMPLATE}')"
  OUTPUT_VARIABLE PYTHON_INSTDIR
  OUTPUT_STRIP_TRAILING_WHITESPACE)

execute_process(
COMMAND
${PYTHON_EXECUTABLE} ${CMAKE_SOURCE_DIR}/src/ceph.setpath.py ${PYTHON_INSTDIR} ${CMAKE_INSTALL_PREFIX}/bin
OUTPUT_VARIABLE CEPH_PYTHON_SET_PATH)

include_directories(".")
#include_directories("./include")

if(HAVE_LTTNG)
  add_subdirectory(blkin)
  include_directories(blkin/blkin-lib)
  include_directories(blkin)
endif(HAVE_LTTNG)

if(${WITH_TCMALLOC})
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fno-builtin-malloc -fno-builtin-calloc -fno-builtin-realloc -fno-builtin-free")
  set(TCMALLOC_LIBS tcmalloc)
  set(TCMALLOC_srcs perfglue/heap_profiler.cc)
else()
  set(TCMALLOC_srcs perfglue/disabled_heap_profiler.cc)
endif(${WITH_TCMALLOC})

# tcmalloc heap profiler
set(heap_profiler_files ${TCMALLOC_srcs})
add_library(heap_profiler_objs OBJECT ${heap_profiler_files})

set(LIBEDIT_LIBS edit)

# Common infrastructure
configure_file(
  ${CMAKE_SOURCE_DIR}/src/ceph_ver.h.in.cmake
  ${CMAKE_BINARY_DIR}/src/include/ceph_ver.h
  @ONLY)

set(arch_files
  arch/intel.c
  arch/neon.c
  arch/probe.cc
  )

set(auth_files
  auth/AuthAuthorizeHandler.cc
  auth/AuthClientHandler.cc
  auth/AuthSessionHandler.cc
  auth/AuthMethodList.cc
  auth/cephx/CephxAuthorizeHandler.cc
  auth/cephx/CephxClientHandler.cc
  auth/cephx/CephxProtocol.cc
  auth/cephx/CephxSessionHandler.cc
  auth/none/AuthNoneAuthorizeHandler.cc
  auth/unknown/AuthUnknownAuthorizeHandler.cc
  auth/Crypto.cc
  auth/KeyRing.cc
  auth/RotatingKeyRing.cc
  )

if (HAVE_XIO)
  set (xiomsg_files
    msg/QueueStrategy.cc
    msg/XioConnection.cc
    msg/XioMessenger.cc
    msg/XioMsg.cc
    msg/XioPool.cc
    msg/XioPortal.cc
    )
endif (HAVE_XIO)

set(mds_files
  mds/MDSMap.cc
  mds/inode_backtrace.cc
  mds/mdstypes.cc
  )

add_subdirectory(json_spirit)

set(libcommon_files
  common/DecayCounter.cc
  common/LogClient.cc
  common/LogEntry.cc
  common/PrebufferedStreambuf.cc
  common/BackTrace.cc
  common/OutputDataSocket.cc
  common/admin_socket.cc
  common/admin_socket_client.cc
  common/cmdparse.cc
  common/escape.c
  common/Clock.cc
  common/Throttle.cc
  common/Timer.cc
  common/Finisher.cc
  common/environment.cc
  common/sctp_crc32.c
  common/crc32c.cc
  common/crc32c_intel_baseline.c
  common/crc32c_intel_fast.c
  common/assert.cc
  common/run_cmd.cc
  common/WorkQueue.cc
  common/ConfUtils.cc
  common/MemoryModel.cc
  common/fd.cc
  common/xattr.c
  common/str_list.cc
  common/str_map.cc
  common/errno.cc
  common/util.cc
  common/SloppyCRCMap.cc
  common/cohort_lru.cc
  log/Log.cc
  log/SubsystemMap.cc
  mon/MonCap.cc
  mon/MonClient.cc
  mon/MonMap.cc
  msg/Accepter.cc
  msg/DispatchQueue.cc
  msg/Message.cc
  common/RefCountedObj.cc
  msg/Messenger.cc
  msg/Pipe.cc
  msg/PipeConnection.cc
  msg/SimpleMessenger.cc
  msg/DirectMessenger.cc
  msg/msg_types.cc
  common/hobject.cc
  osd/OSDMap.cc
  common/histogram.cc
  osd/osd_types.cc
  common/blkdev.cc
  common/common_init.cc
  common/pipe.c
  common/ceph_argparse.cc
  common/ceph_context.cc
  common/buffer.cc
  common/code_environment.cc
  common/dout.cc
  common/signal.cc
  common/simple_spin.cc
  common/Thread.cc
  common/Formatter.cc
  common/HeartbeatMap.cc
  common/ceph_fs.cc
  common/ceph_hash.cc
  common/ceph_strings.cc
  common/ceph_frag.cc
  common/config.cc
  common/utf8.c
  common/mime.c
  common/strtol.cc
  common/page.cc
  common/version.cc
  common/hex.cc
  common/entity_name.cc
  common/ceph_crypto.cc
  common/ceph_crypto_cms.cc
  common/ceph_json.cc
  common/ipaddr.cc
  common/pick_address.cc
  common/address_helper.cc
  common/linux_version.c
  xxHash-r39/xxhash.c
  vol/Volume.cc
  cohort/CohortVolume.cc
  osdc/Objecter.cc
  common/ThreadPool.cc
  ${arch_files}
  ${auth_files}
  ${xiomsg_files}
  ${mds_files})
set(common_mountcephfs_files
  common/armor.c
  common/safe_io.c
  common/addr_parsing.c
  )
add_library(common_mountcephfs_objs OBJECT ${common_mountcephfs_files})

if(${WITH_PROFILER})
  list(APPEND libcommon_files perfglue/cpu_profiler.cc)
else()
  list(APPEND libcommon_files perfglue/disabled_stubs.cc)
endif(${WITH_PROFILER})

add_library(common_objs OBJECT ${libcommon_files})
set(libcommon_objs $<TARGET_OBJECTS:common_objs>
  $<TARGET_OBJECTS:common_mountcephfs_objs>)

# do NOT make common depend on global.  If you think
#  you need this, check for and get rid of "dout()" calls.

add_library(common ${CEPH_SHARED} ${libcommon_objs})
if(${ENABLE_SHARED})
  set_target_properties(common PROPERTIES OUTPUT_NAME ceph-common
    VERSION "1.0.0" SOVERSION "1" LINK_FLAGS "-Wl,-export-dynamic")
endif(${ENABLE_SHARED})
install(TARGETS common DESTINATION lib)

set_source_files_properties(${CMAKE_SOURCE_DIR}/src/common/version.cc
  ${CMAKE_SOURCE_DIR}/src/test/encoding/ceph_dencoder.cc
  APPEND PROPERTY OBJECT_DEPENDS ${CMAKE_BINARY_DIR}/src/include/ceph_ver.h)

if(${WITH_PROFILER})
  target_link_libraries(common PRIVATE profiler)
endif(${WITH_PROFILER})
if(HAVE_LTTNG)
  target_link_libraries(common PRIVATE blkin)
endif(HAVE_LTTNG)

target_link_libraries(common PRIVATE erasure_code json_spirit ${CRYPTO_LIBS} rt ${Boost_LIBRARIES} ${EXTRALIBS})

set(libglobal_srcs
  global/global_init.cc
  global/pidfile.cc
  global/signal_handler.cc
  global/global_context.cc
  )
add_library(global STATIC
  ${libglobal_srcs}
  )
target_link_libraries(global PRIVATE common ${CMAKE_THREAD_LIBS_INIT} ${CRYPTO_LIBS} m ${EXTRALIBS})
if(${ENABLE_SHARED})
  set_target_properties(global PROPERTIES OUTPUT_NAME ceph-global VERSION "1.0.0" SOVERSION "1"
    LINK_FLAGS "-Wl,-export-dynamic")
endif(${ENABLE_SHARED})

# rados object classes
add_subdirectory(cls)

# RADOS client/library
set(osdc_files
  osdc/Objecter.cc
  )
set(osdc_rbd_files
  osdc/ObjectCacher.cc
  )
add_library(osdc_rbd_objs OBJECT ${osdc_rbd_files})
add_library(osdc STATIC ${osdc_files} $<TARGET_OBJECTS:osdc_rbd_objs>)

set(librados_srcs
  librados/librados.cc
  librados/RadosClient.cc
  librados/IoCtxImpl.cc
  )
add_library(librados_objs OBJECT ${librados_srcs})
add_library(librados ${CEPH_SHARED} 
  $<TARGET_OBJECTS:cls_references_objs>
  $<TARGET_OBJECTS:librados_objs>
  $<TARGET_OBJECTS:heap_profiler_objs>)
add_dependencies(librados osdc)
target_link_libraries(librados PRIVATE osdc osd os global common cls_lock_client
  ${CRYPTO_LIBS} ${EXTRALIBS} ${TCMALLOC_LIBS})
if(${ENABLE_SHARED})
  set_target_properties(librados PROPERTIES OUTPUT_NAME rados VERSION 2.0.0 SOVERSION 2
    LINK_FLAGS "-Wl,-export-dynamic")
endif(${ENABLE_SHARED})
install(FILES include/rados/librados.h include/rados/rados_types.h
  include/rados/rados_types.hpp include/rados/librados.hpp
  include/buffer.h include/page.h include/crc32c.h
  DESTINATION include/rados)
install(TARGETS librados DESTINATION lib)

set(rados_srcs
  tools/rados/rados.cc
  common/obj_bencher.cc)
add_executable(rados ${rados_srcs})
target_link_libraries(rados librados global boost_filesystem ${CMAKE_DL_LIBS})

set(librados_config_srcs
  librados-config.cc)
add_executable(librados-config ${librados_config_srcs})
target_link_libraries(librados-config librados global boost_filesystem
  ${CMAKE_DL_LIBS})

install(TARGETS rados librados-config DESTINATION bin)

install(DIRECTORY ${CMAKE_SOURCE_DIR}/src/pybind/
  DESTINATION ${PYTHON_INSTDIR})

# Monitor
set(lib_mon_srcs
  auth/cephx/CephxKeyServer.cc
  auth/cephx/CephxServiceHandler.cc
  auth/AuthServiceHandler.cc
  ${osd_mon_files}
  mon/Paxos.cc
  mon/PaxosService.cc
  mon/OSDMonitor.cc
  mon/MDSMonitor.cc
  mon/MonmapMonitor.cc
  mon/LogMonitor.cc
  mon/AuthMonitor.cc
  mon/Elector.cc
  mon/MonitorStore.cc
  mon/HealthMonitor.cc
  ${os_mon_files}
  mon/DataHealthService.cc
  mon/ConfigKeyService.cc
  )
set(monitorstore_src
  mon/MonitorStore.cc
  )
add_library(monitorstore_obj OBJECT ${monitorstore_src})
add_library(mon STATIC ${lib_mon_srcs} $<TARGET_OBJECTS:os_mon_objs>
  $<TARGET_OBJECTS:osd_mon_objs> $<TARGET_OBJECTS:monitorstore_obj>)
set(ceph_mon_srcs ceph_mon.cc common/TextTable.cc)
add_executable(ceph-mon ${ceph_mon_srcs} $<TARGET_OBJECTS:heap_profiler_objs>)
target_link_libraries(ceph-mon mon boost_regex boost_system boost_thread
  common os global leveldb boost_filesystem ${EXTRALIBS} ${CMAKE_DL_LIBS}
  ${TCMALLOC_LIBS})
install(TARGETS ceph-mon DESTINATION bin)

# OSD

set(libos_srcs
  os/chain_xattr.cc
  os/ObjectStore.cc
  os/Factory.cc
  os/JournalingObjectStore.cc
  os/LevelDBStore.cc
  os/DBObjectMap.cc
  os/WBThrottle.cc
  os/GenericObjectMap.cc
  )
set(os_mon_files
  os/LevelDBStore.cc
  )
add_library(os_mon_objs OBJECT ${os_mon_files})
add_library(os ${CEPH_SHARED} ${libos_srcs})
target_link_libraries(os PRIVATE leveldb snappy boost_filesystem)
if(${ENABLE_SHARED})
  set_target_properties(os PROPERTIES OUTPUT_NAME ceph-os
    VERSION "1.0.0" SOVERSION "1" LINK_FLAGS "-Wl,-export-dynamic")
endif(${ENABLE_SHARED})
install(TARGETS os DESTINATION lib)

# objectstore modules
# os filestore
set(os_filestore_files
  os/FileJournal.cc
  os/FileStore.cc
  os/GenericFileStoreBackend.cc
  os/BtrfsFileStoreBackend.cc
  os/ZFSFileStoreBackend.cc
)

add_library(os_filestore_objs OBJECT ${os_filestore_files})
add_library(os_filestore SHARED $<TARGET_OBJECTS:os_filestore_objs>)
if(${HAVE_LIBAIO})
  target_link_libraries(os_filestore aio)
endif(${HAVE_LIBAIO})
target_link_libraries(os_filestore common os)
set_target_properties(os_filestore PROPERTIES VERSION "1.0.0" SOVERSION "1")
install(TARGETS os_filestore DESTINATION lib/os-modules)

#os kvstore
set(os_kvstore_files
  os/KeyValueStore.cc
)

add_library(os_kvstore_objs OBJECT ${os_kvstore_files})
add_library(os_kvstore SHARED $<TARGET_OBJECTS:os_kvstore_objs>)
target_link_libraries(os_kvstore common os)
set_target_properties(os_kvstore PROPERTIES VERSION "1.0.0" SOVERSION "1")
install(TARGETS os_kvstore DESTINATION lib/os-modules)

#os memstore
set(os_memstore_files
  os/MemStore.cc
)

add_library(os_memstore_objs OBJECT ${os_memstore_files})
add_library(os_memstore SHARED $<TARGET_OBJECTS:os_memstore_objs>)
target_link_libraries(os_memstore common os)
set_target_properties(os_memstore PROPERTIES VERSION "1.0.0" SOVERSION "1")
install(TARGETS os_memstore DESTINATION lib/os-modules)

# RADOS classes
set(cls_references_files objclass/class_api.cc)
add_library(cls_references_objs OBJECT ${cls_references_files})

set(osdc_osd_srcs osdc/Objecter.cc)

set(libosd_srcs
  libosd/libosd.cc
  libosd/remote.cc
  libosd/Context.cc
  libosd/Objecter.cc
  libosd/Dispatcher.cc
  libosd/Messengers.cc
  )
set(osd_srcs
  osd/OSD.cc
  osd/Watch.cc
  osd/ClassHandler.cc
  osd/OpRequest.cc
  osd/OSDVol.cc
  ${osdc_osd_srcs}
  ${libosd_srcs}
  )
set(osd_mon_files mon/Monitor.cc)
add_library(osd_mon_objs OBJECT ${osd_mon_files})
add_library(osd ${CEPH_SHARED} ${osd_srcs} $<TARGET_OBJECTS:cls_references_objs>)
if(${ENABLE_SHARED})
  set_target_properties(osd PROPERTIES OUTPUT_NAME ceph-osd VERSION "1.0.0"
    SOVERSION "1" LINK_FLAGS "-Wl,-export-dynamic")
  install(TARGETS osd DESTINATION lib)
  install(FILES libosd/ceph_osd.h libosd/ceph_osd_remote.h DESTINATION include)
endif(${ENABLE_SHARED})
target_link_libraries(osd PRIVATE common os global dl leveldb ${EXTRALIBS})

set(ceph_osd_srcs ceph_osd.cc objclass/class_api.cc)
add_executable(ceph-osd ${ceph_osd_srcs} $<TARGET_OBJECTS:heap_profiler_objs>)
target_link_libraries(ceph-osd osd os global
  boost_system boost_filesystem ${TCMALLOC_LIBS})
install(TARGETS ceph-osd DESTINATION bin)

# MDS
if(${WITH_MDS})
  set(mds_srcs
    mds/Anchor.cc
    mds/AnchorClient.cc
    mds/AnchorServer.cc
    mds/Capability.cc
    mds/CDentry.cc
    mds/CDir.cc
    mds/CInode.cc
    mds/Dumper.cc
    mds/flock.cc
    mds/InoTable.cc
    mds/journal.cc
    mds/Locker.cc
    mds/locks.c
    mds/LogEvent.cc
    mds/MDBalancer.cc
    mds/MDCache.cc
    mds/MDLog.cc
    mds/MDS.cc
    mds/MDSTable.cc
    mds/MDSTableClient.cc
    mds/MDSTableServer.cc
    mds/MDSUtility.cc
    mds/Migrator.cc
    mds/Mutation.cc
    mds/Resetter.cc
    mds/Server.cc
    mds/SessionMap.cc
    osdc/Journaler.cc
    )
  add_library(mds ${mds_srcs})
  set(ceph_mds_srcs ceph_mds.cc)
  add_executable(ceph-mds ${ceph_mds_srcs} $<TARGET_OBJECTS:heap_profiler_objs>)
  target_link_libraries(ceph-mds mds osdc ${CMAKE_DL_LIBS} global
    ${TCMALLOC_LIBS} boost_system boost_thread)
  install(TARGETS ceph-mds DESTINATION bin)
endif(${WITH_MDS})

add_subdirectory(erasure-code)

if (WITH_TESTS)
  add_subdirectory(gtest)
  add_subdirectory(test)
endif (WITH_TESTS)

# Support/Tools

set(cephfs_srcs
  cephfs.cc
  )
add_executable(cephfstool ${cephfs_srcs})
target_link_libraries(cephfstool common ${EXTRALIBS})
set_target_properties(cephfstool PROPERTIES OUTPUT_NAME cephfs)
install(TARGETS cephfstool DESTINATION bin)

set(ceph_conf_srcs
  tools/ceph_conf.cc
  )
add_executable(ceph-conf ${ceph_conf_srcs})
target_link_libraries(ceph-conf global)
install(TARGETS ceph-conf DESTINATION bin)

set(monmaptool_srcs
  tools/monmaptool.cc
  )
add_executable(monmaptool ${monmaptool_srcs})
target_link_libraries(monmaptool global)
install(TARGETS monmaptool DESTINATION bin)

set(osdomaptool_srcs
  tools/osdmaptool.cc
  )
add_executable(osdmaptool  ${osdomaptool_srcs})
target_link_libraries(osdmaptool global ${CMAKE_DL_LIBS})
install(TARGETS osdmaptool DESTINATION bin)

set(ceph_authtool_srcs
  tools/ceph_authtool.cc
  )
add_executable(ceph-authtool ${ceph_authtool_srcs})
target_link_libraries(ceph-authtool global ${EXTRALIBS})
install(TARGETS ceph-authtool DESTINATION bin)

set(ceph_babeltrace_wrapper_srcs
  tools/ceph_babeltrace_wrapper.cc
  )
add_executable(ceph_babeltrace_wrapper ${ceph_babeltrace_wrapper_srcs})
target_link_libraries(ceph_babeltrace_wrapper common ${EXTRALIBS})
install(TARGETS ceph_babeltrace_wrapper DESTINATION bin)

set(ceph_mon_store_converter_srcs
  tools/mon_store_converter.cc
  )
add_executable(ceph_mon_store_converter ${ceph_mon_store_converter_srcs}
  $<TARGET_OBJECTS:monitorstore_obj>)
target_link_libraries(ceph_mon_store_converter os global leveldb
  boost_filesystem boost_system)
install(TARGETS ceph_mon_store_converter DESTINATION bin)

if(WITH_BABELTRACE_CEPH)
  set(babeltrace_ceph_srcs
    tools/ceph_log_plugin.cc
  )
  add_executable(babeltrace_ceph ${babeltrace_ceph_srcs})
  target_link_libraries(babeltrace_ceph glib-2.0 babeltrace babeltrace-ctf)
  install(TARGETS babeltrace_ceph DESTINATION bin)
endif(WITH_BABELTRACE_CEPH)

configure_file(${CMAKE_SOURCE_DIR}/src/mkcephfs.in
  ${CMAKE_BINARY_DIR}/mkcephfs @ONLY)

configure_file(${CMAKE_SOURCE_DIR}/src/ceph-coverage.in
  ${CMAKE_BINARY_DIR}/ceph-coverage @ONLY)

configure_file(${CMAKE_SOURCE_DIR}/src/ceph-debugpack.in
  ${CMAKE_BINARY_DIR}/ceph-debugpack @ONLY)

configure_file(${CMAKE_SOURCE_DIR}/src/ceph.in.cmake
  ${CMAKE_BINARY_DIR}/ceph @ONLY)

add_custom_target(shell_scripts ALL
  COMMAND chmod 755 ${CMAKE_BINARY_DIR}/mkcephfs
  ${CMAKE_BINARY_DIR}/init-ceph ${CMAKE_BINARY_DIR}/ceph-debugpack
  ${CMAKE_BINARY_DIR}/ceph-coverage ${CMAKE_BINARY_DIR}/ceph
  DEPENDS ${CMAKE_BINARY_DIR}/mkcephfs ${CMAKE_BINARY_DIR}/init-ceph
  ${CMAKE_BINARY_DIR}/ceph-debugpack ${CMAKE_BINARY_DIR}/ceph-coverage
  ${CMAKE_BINARY_DIR}/ceph COMMENT "Shell Scripts have permission")

install(PROGRAMS
  ${CMAKE_SOURCE_DIR}/src/ceph-run
  ${CMAKE_SOURCE_DIR}/src/vstart.sh
  ${CMAKE_SOURCE_DIR}/src/ceph-clsinfo
  # This is rather bostumous, it would be better if configured scripts were
  # treated as targets in their own right. Will require some poking at
  # CMake to work properly. Same goes for the other configured scripts.
  ${CMAKE_BINARY_DIR}/ceph-debugpack
  ${CMAKE_BINARY_DIR}/ceph-coverage
  ${CMAKE_BINARY_DIR}/ceph
  DESTINATION bin)
install(TARGETS
  cephfstool
  ceph-conf
  ceph-authtool
  ceph_mon_store_converter
  DESTINATION bin)

configure_file(${CMAKE_SOURCE_DIR}/src/init-ceph.in
  ${CMAKE_BINARY_DIR}/init-ceph @ONLY)

install(PROGRAMS ${CMAKE_BINARY_DIR}/init-ceph DESTINATION bin)
install(FILES ${CMAKE_SOURCE_DIR}/doc/start/ceph.conf
  DESTINATION ${sysconfdir}/ceph/ RENAME ceph.conf.example)

install(PROGRAMS ${CMAKE_SOURCE_DIR}/src/ceph_common.sh
  DESTINATION ${CMAKE_INSTALL_PREFIX}/lib/ceph)

install(PROGRAMS ${CMAKE_SOURCE_DIR}/src/ceph-create-keys
  ${CMAKE_SOURCE_DIR}/src/ceph-disk ${CMAKE_SOURCE_DIR}/src/ceph-disk-activate
  ${CMAKE_SOURCE_DIR}/src/ceph-disk-prepare ${CMAKE_SOURCE_DIR}/src/ceph-disk-udev
  ${CMAKE_BINARY_DIR}/mkcephfs DESTINATION sbin)

# Filesystem client
if(${WITH_CLIENT})
  set(libclient_srcs client/Client.cc client/Dentry.cc
    client/Inode.cc client/MetaRequest.cc client/MetaSession.cc
    client/Trace.cc)
  add_library(client ${libclient_srcs})
  target_link_libraries(client PRIVATE osdc ${LIBEDIT_LIBS})
  set(libcephfs_srcs libcephfs.cc)
  add_library(cephfs SHARED ${libcephfs_srcs})
  target_link_libraries(cephfs PRIVATE client global)
  if(${ENABLE_SHARED})
    set_target_properties(cephfs PROPERTIES OUTPUT_NAME cephfs VERSION 1.0.0 SOVERSION 1
      LINK_FLAGS "-Wl,-export-dynamic")
  endif(${ENABLE_SHARED})
  install(TARGETS cephfs DESTINATION lib)
  install(DIRECTORY "${CMAKE_SOURCE_DIR}/src/include/cephfs" DESTINATION include)
  set(ceph_syn_srcs ceph_syn.cc client/SyntheticClient.cc)
  add_executable(ceph-syn ${ceph_syn_srcs})
  target_link_libraries(ceph-syn client global boost_system)

  set(mount_ceph_srcs mount/mount.ceph.c)
  add_executable(mount.ceph ${mount_ceph_srcs}
    $<TARGET_OBJECTS:common_mountcephfs_objs>
    $<TARGET_OBJECTS:rbd_mountcephfs_objs>)
  target_link_libraries(mount.ceph keyutils)

  install(TARGETS ceph-syn DESTINATION bin)
  install(TARGETS mount.ceph DESTINATION sbin)

  if(WITH_FUSE)
    set(ceph_fuse_srcs ceph_fuse.cc client/fuse_ll.cc)
    add_executable(ceph-fuse ${ceph_fuse_srcs})
    target_link_libraries(ceph-fuse fuse client global boost_system)
    install(TARGETS ceph-fuse DESTINATION bin)
  endif(WITH_FUSE)
endif(${WITH_CLIENT})

if(${WITH_RBD})
  set(librbd_srcs librbd/librbd.cc librbd/AioCompletion.cc
    librbd/AioRequest.cc librbd/ImageCtx.cc
    librbd/internal.cc librbd/LibrbdWriteback.cc librbd/WatchCtx.cc)
  add_library(librbd ${CEPH_SHARED} ${librbd_srcs}
    $<TARGET_OBJECTS:osdc_rbd_objs>)
  target_link_libraries(librbd PRIVATE cls_lock_client ${CMAKE_DL_LIBS})
  if(${ENABLE_SHARED})
    set_target_properties(librbd PROPERTIES VERSION "1.0.0" SOVERSION "1" OUTPUT_NAME rbd
      LINK_FLAGS "-Wl,-export-dynamic")
  endif(${ENABLE_SHARED})
  install(DIRECTORY "${CMAKE_SOURCE_DIR}/src/include/rbd" DESTINATION include)
  install(TARGETS librados librbd DESTINATION lib)
  install(FILES include/rbd/librbd.h include/rbd/librbd.hpp
    DESTINATION include/rbd)
  set(rbd_srcs rbd.cc common/TextTable.cc)
  set(rbd_mountcephfs_files common/secret.c)
  add_library(rbd_mountcephfs_objs OBJECT ${rbd_mountcephfs_files})
  add_executable(rbd ${rbd_srcs}
    $<TARGET_OBJECTS:rbd_mountcephfs_objs>
    $<TARGET_OBJECTS:heap_profiler_objs>)
  set_target_properties(rbd PROPERTIES OUTPUT_NAME rbd)
  target_link_libraries(rbd global librbd librados common keyutils udev
    boost_filesystem ${BLKID_LIBRARIES} ${CMAKE_DL_LIBS} ${TCMALLOC_LIBS})
  install(TARGETS rbd DESTINATION bin)
  install(PROGRAMS ${CMAKE_SOURCE_DIR}/src/ceph-rbdnamer
    DESTINATION bin)
endif(${WITH_RBD})

# RadosGW
if(${WITH_KVS})
  set(kvs_srcs key_value_store/cls_kvs.cc)
  add_library(cls_kvs SHARED ${kvs_srcs})
  set_target_properties(cls_kvs PROPERTIES VERSION "1.0.0" SOVERSION "1")
  install(TARGETS cls_kvs DESTINATION lib/rados-classes)
endif(${WITH_KVS})

if(${WITH_RADOSGW})
  set(radosgw_srcs rgw/rgw_resolve.cc rgw/rgw_rest.cc rgw/rgw_rest_swift.cc
    rgw/rgw_rest_s3.cc rgw/rgw_rest_usage.cc rgw/rgw_rest_user.cc
    rgw/rgw_rest_bucket.cc rgw/rgw_http_client.cc rgw/rgw_swift.cc
    rgw/rgw_swift_auth.cc rgw/rgw_main.cc rgw/rgw_keystone.cc
    rgw/rgw_rest_client.cc rgw/rgw_metadata.cc rgw/rgw_rest_config.cc
    rgw/rgw_rest_conn.cc rgw/rgw_rest_log.cc rgw/rgw_rest_metadata.cc
    rgw/rgw_rest_opstate.cc rgw/rgw_rest_replica_log.cc ${kvs_srcs})
  add_library(radosgw_objs OBJECT ${radosgw_srcs})
  add_executable(radosgw $<TARGET_OBJECTS:radosgw_objs> $<TARGET_OBJECTS:heap_profiler_objs>)
  target_link_libraries(radosgw rgw_a librados
    cls_rgw_client cls_lock_client cls_refcount_client
    cls_log_client cls_statelog_client cls_version_client
    cls_replica_log_client cls_user_client
    curl expat global fcgi resolv ${TCMALLOC_LIBS})
  install(TARGETS radosgw DESTINATION bin)
endif(${WITH_RADOSGW})
