#!/bin/sh 

# if we start up as ./init-ceph, assume everything else is in the
# current directory too.
if [ `dirname $0` = "." ] && [ $PWD != "/etc/init.d" ]; then
    BINDIR=.
    LIBDIR=.
    ETCDIR=.
else
    BINDIR=@bindir@
    LIBDIR=@libdir@/ceph
    ETCDIR=@sysconfdir@/ceph
fi

usage_exit() {
    echo "usage: $0 -c ceph.conf [--allhosts] [--mkbtrfs] [-k adminkeyring]"
    echo "   ** be careful, this WILL clobber old data; check your ceph.conf carefully **"
    exit
}

. $LIBDIR/ceph_common.sh


allhosts=0
clobber=""
mkbtrfs=0
numosd=
usecrushmapsrc=
usecrushmap=
verbose=0
adminkeyring=""
conf=""

while [ $# -ge 1 ]; do
case $1 in
    -v )
	    verbose=1;
	    ;;
    --allhosts | -a)
	    allhosts=1
	    ;;
    --clobber | --clobber_old_data)
	    clobber="--clobber"
	    ;;
    --mkbtrfs)
	    mkbtrfs=1
	    ;;
    --conf | -c)
	    [ -z "$2" ] && usage_exit
	    shift
	    conf=$1
	    ;;
    --numosd)
	    [ -z "$2" ] && usage_exit
	    shift
	    numosd=$1
	    ;;
    --crushmapsrc)
	    [ -z "$2" ] && usage_exit
	    shift
	    usecrushmapsrc=$1
	    ;;
    --crushmap)
	    [ -z "$2" ] && usage_exit
	    shift
	    usecrushmap=$1
	    ;;
    -k)
	    [ -z "$2" ] && usage_exit
	    shift
	    adminkeyring=$1
	    ;;
    *)
	    echo unrecognized option \'$1\'
	    usage_exit
	    ;;
esac
shift
done

[ -z "$conf" ] && usage_exit

if [ $allhosts -eq 0 ]; then
    echo "mkcephfs currently requires -a|--allhosts to initialize the whole fs at once."
    usage_exit
fi

if [ -z "$adminkeyring" ]; then
    echo "mkcephfs requires '-k /path/to/admin/keyring'. default location is /etc/ceph/keyring."
    usage_exit
fi

verify_conf

get_name_list "$@"

TDIR=`mktemp -d -t mkcephfs.XXXXXXXXXX` || exit 1
trap "rm -rf ${TDIR}; exit" INT TERM EXIT

# do core fs initialization steps
if true; then
    # first, make a list of monitors
    mons=`$CCONF -c $conf -l mon | egrep -v '^mon$' | sort`
    args=""

    type="mon"
    for name in $mons; do
	id=`echo $name | cut -c 4- | sed 's/\\.//'`
	get_conf addr "" "mon addr"
	args=$args" --add $id $addr"
    done

    # build monmap
    monmap="$TDIR/monmap.$$"
    echo $BINDIR/monmaptool --create --clobber $args --print $monmap || exit 1
    $BINDIR/monmaptool --create --clobber $args --print $monmap || exit 1

    # build osdmap
    osdmap="$TDIR/osdmap.$$"
    if [ -z "$numosd" ]; then
	# find highest osd id - assumes the conf file complies with osd numbering requirements
	maxosd=`$CCONF -c $conf -l osd | egrep -v '^osd$' | cut -c 4- | sort -n | tail -1`
	numosd=$(($maxosd + 1))
	echo Highest osd in $conf is osd$maxosd, number of osd is $numosd.
    fi
    $BINDIR/osdmaptool --clobber --createsimple $numosd $osdmap || exit 1

    # import crush map?
    get_conf crushmapsrc "$usecrushmapsrc" "crush map src" mon global
    if [ -n "$crushmapsrc" ]; then
	echo Compiling crush map from $crushmapsrc to $crushmap
	crushmap="$TDIR/crushmap.$$"
	$BINDIR/crushtool -c $crushmapsrc -o $crushmap
    fi
    get_conf crushmap "$usecrushmap" "crush map" mon global
    if [ -n "$crushmap" ]; then
	echo Importing crush map from $crushmap
	$BINDIR/osdmaptool --clobber --import-crush $crushmap $osdmap
    fi

    # admin keyring
    [ -z "$adminkeyring" ] && adminkeyring="$TDIR/admin.keyring.$$"
    echo Building admin keyring at $adminkeyring
    [ -e "$monkeyring" ] && rm -f $monkeyring
    $BINDIR/cauthtool --create-keyring --gen-key --name=client.admin --set-uid=0 \
	--cap mon 'allow *' \
	--cap osd 'allow *' \
	--cap mds 'allow' \
	$adminkeyring

    # mon keyring (for monitor)
    echo Building monitor keyring with all service keys
    monkeyring="$TDIR/monkeyring.$$"
    $BINDIR/cauthtool --create-keyring --gen-key --name=mon. $monkeyring

    $BINDIR/cauthtool --import-keyring $adminkeyring $monkeyring

    for name in $what; do
	type=`echo $name | cut -c 1-3`   # e.g. 'mon', if $name is 'mon1'
	id=`echo $name | cut -c 4- | sed 's/\\.//'`

	if [ "$type" = "osd" ]; then
	    $BINDIR/cauthtool --create-keyring --gen-key --name=osd.$id \
		--cap mon 'allow rwx' \
		--cap osd 'allow *' \
		$TDIR/keyring.osd.$id
	    $BINDIR/cauthtool --import-keyring $TDIR/keyring.osd.$id $monkeyring
	fi
	if [ "$type" = "mds" ]; then
	    $BINDIR/cauthtool --create-keyring --gen-key --name=mds.$id \
		--cap mon 'allow rwx' \
		--cap osd 'allow *' \
		--cap mds 'allow' \
		$TDIR/keyring.mds.$id
	    $BINDIR/cauthtool --import-keyring $TDIR/keyring.mds.$id $monkeyring
	fi
    done

    tmpkeyring="$TDIR/keyring.$$"
fi


# create monitors, osds
for name in $what; do
    type=`echo $name | cut -c 1-3`   # e.g. 'mon', if $name is 'mon1'
    id=`echo $name | cut -c 4- | sed 's/\\.//'`
    num=$id

    check_host || continue

    if [ -n "$ssh" ] && ( echo $pushed_to | grep -v -q " $host " ); then
        conf_dir=`dirname "$conf"`
        ssh $host mkdir -p "$conf_dir"
        ssh $host mkdir -p "$TDIR"
	scp -q $conf $host:$conf
	scp -q $osdmap $host:$osdmap
	scp -q $monmap $host:$monmap
	pushed_to="$pushed_to $host "
    fi

    if [ "$type" = "mon" ]; then
	if [ -n "$ssh" ]; then
	    if [ -n "$user" ]; then
		scp -q $monkeyring $user@$host:$tmpkeyring
	    else
		scp -q $monkeyring $host:$tmpkeyring
	    fi
	else
	    cp -a $monkeyring $tmpkeyring
	    [ -n "$user" ] && chown $user $tmpkeyring
	fi
	get_conf mon_data "" "mon data"
	do_cmd "$BINDIR/cmon -c $conf --mkfs -i $id --monmap $monmap --osdmap $osdmap -k $tmpkeyring ; rm -f $tmpkeyring"

	if [ -n "$ssh" ]; then
	    if [ -n "$user" ]; then
		scp -p $adminkeyring $user@$host:$mon_data/admin_keyring
	    else
		scp -p $adminkeyring $host:$mon_data/admin_keyring
	    fi
	else
	    cp -av $adminkeyring $mon_data/admin_keyring
	fi
    fi

    if [ "$type" = "osd" ]; then
	get_conf osd_data "" "osd data"
	get_conf osd_journal "" "osd journal"
	get_conf keyring "" "keyring"
	get_conf btrfs_path "$osd_data" "btrfs path"  # mount point defaults so osd data
	get_conf btrfs_devs "" "btrfs devs"
	first_dev=`echo $btrfs_devs | cut '-d ' -f 1`
	get_conf btrfs_opt "noatime" "btrfs options"
	[ -n "$btrfs_opt" ] && btrfs_opt="-o $btrfs_opt"

	if [ -n "$osd_journal" ] && echo "$btrfs_devs" | grep -q -w "$osd_journal" ; then
	    echo "ERROR: osd journal device ($osd_journal) also used by btrfs devs ($btrfs_devs)"
	    continue
	fi
	
	do_cmd "test -d $osd_data || mkdir -p $osd_data"
	[ -n "$osd_journal" ] && do_cmd "test -d $osd_journal || mkdir -p `dirname $osd_journal`"

	if [ $mkbtrfs -eq 1 ]; then
	    get_conf osd_user "root" "user"
	    do_root_cmd "umount $btrfs_path ; for f in $btrfs_devs ; do umount \$f ; done ; modprobe btrfs ; mkfs.btrfs $btrfs_devs ; modprobe btrfs ; btrfsctl -a ; mount -t btrfs $btrfs_opt $first_dev $btrfs_path ; chown $osd_user $btrfs_path ; chmod +w $btrfs_path "
	fi

	[ -n "$ssh" ] && scp $monmap $host:$monmap
	do_cmd "$BINDIR/cosd -c $conf --monmap $monmap -i $num --mkfs --osd-data $osd_data"

	if [ -n "$keyring" ]; then
	    if [ -n "$ssh" ]; then
		if [ -n "$user" ]; then
		    scp $TDIR/keyring.osd.$id $user@$host:$keyring
		else
		    scp $TDIR/keyring.osd.$id $host:$keyring
		fi
	    else
		cp -v $TDIR/keyring.osd.$id $keyring
	    fi
	else
	    echo WARNING: no keyring specified for $name
	fi
	rm -f $TDIR/keyring.osd.$id
    fi

    if [ "$type" = "mds" ]; then
	get_conf keyring "" "keyring"
	if [ -n "$keyring" ]; then
	    if [ -n "$ssh" ]; then
		if [ -n "$user" ]; then
		    scp $TDIR/keyring.mds.$id $user@$host:$keyring
		else
		    scp $TDIR/keyring.mds.$id $host:$keyring
		fi
	    else
		cp -v $TDIR/keyring.mds.$id $keyring
	    fi
	else
	    echo WARNING: no keyring specified for $name
	fi
	rm -f $TDIR/keyring.mds.$id
    fi
done

for name in $what; do
    type=`echo $name | cut -c 1-3`   # e.g. 'mon', if $name is 'mon1'
    id=`echo $name | cut -c 4- | sed 's/\\.//'`
    num=$id
    if [ -n "$ssh" ]; then
        ssh $host rm -rf $TDIR
    fi
done

rm -f $monkeyring
