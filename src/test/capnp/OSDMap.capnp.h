// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: OSDMap.capnp

#ifndef CAPNP_INCLUDED_afd07975e4b248c8_
#define CAPNP_INCLUDED_afd07975e4b248c8_

#include <capnp/generated-header-support.h>

#if CAPNP_VERSION != 5000
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif


namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(a8d803e960029b1b);
CAPNP_DECLARE_SCHEMA(900c1c8be2f9b8d6);
CAPNP_DECLARE_SCHEMA(93785a3f4bff6e92);
CAPNP_DECLARE_SCHEMA(d58680a2c454123b);
CAPNP_DECLARE_SCHEMA(804606929f51caf1);
CAPNP_DECLARE_SCHEMA(b77685cd04f939bb);
CAPNP_DECLARE_SCHEMA(d3291dbad7ec8f02);
enum class VolType_d3291dbad7ec8f02: uint16_t {
  COHORT_VOL,
  NOT_A_VOL_TYPE,
};
CAPNP_DECLARE_ENUM(VolType, d3291dbad7ec8f02);
CAPNP_DECLARE_SCHEMA(b7bcb1302ce7bbf2);
CAPNP_DECLARE_SCHEMA(9496a314c7dc3cb5);
CAPNP_DECLARE_SCHEMA(cdccdb80d76fafda);
CAPNP_DECLARE_SCHEMA(b4924058ef1158d1);
CAPNP_DECLARE_SCHEMA(be44b13b8c37196e);

}  // namespace schemas
}  // namespace capnp

namespace Captain {

struct OSDMap {
  OSDMap() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  CAPNP_DECLARE_STRUCT(a8d803e960029b1b, 2, 14);
};

struct Uuid {
  Uuid() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  CAPNP_DECLARE_STRUCT(900c1c8be2f9b8d6, 0, 1);
};

struct Epoch {
  Epoch() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  CAPNP_DECLARE_STRUCT(93785a3f4bff6e92, 1, 0);
};

struct UTime {
  UTime() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct Tv;

  CAPNP_DECLARE_STRUCT(d58680a2c454123b, 1, 0);
};

struct UTime::Tv {
  Tv() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  CAPNP_DECLARE_STRUCT(804606929f51caf1, 1, 0);
};

struct Volume {
  Volume() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  typedef ::capnp::schemas::VolType_d3291dbad7ec8f02 VolType;


  CAPNP_DECLARE_STRUCT(b77685cd04f939bb, 1, 3);
};

struct EntityAddr {
  EntityAddr() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  CAPNP_DECLARE_STRUCT(b7bcb1302ce7bbf2, 1, 1);
};

struct SockAddrStorage {
  SockAddrStorage() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  CAPNP_DECLARE_STRUCT(9496a314c7dc3cb5, 0, 1);
};

struct OsdInfo {
  OsdInfo() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  CAPNP_DECLARE_STRUCT(cdccdb80d76fafda, 0, 3);
};

struct EntityAddrUTimePair {
  EntityAddrUTimePair() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  CAPNP_DECLARE_STRUCT(b4924058ef1158d1, 0, 2);
};

struct OsdXInfo {
  OsdXInfo() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  CAPNP_DECLARE_STRUCT(be44b13b8c37196e, 2, 1);
};

// =======================================================================================

class OSDMap::Reader {
public:
  typedef OSDMap Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::uint8_t getStructV() const;

  inline  ::uint8_t getStructCompat() const;

  inline  ::uint32_t getStructLen() const;

  inline bool hasFsid() const;
  inline  ::Captain::Uuid::Reader getFsid() const;

  inline bool hasEpoch() const;
  inline  ::Captain::Epoch::Reader getEpoch() const;

  inline bool hasCreated() const;
  inline  ::Captain::UTime::Reader getCreated() const;

  inline bool hasModified() const;
  inline  ::Captain::UTime::Reader getModified() const;

  inline  ::uint32_t getFlags() const;

  inline  ::int32_t getMaxOsd() const;

  inline bool hasOsdState() const;
  inline  ::capnp::List< ::uint8_t>::Reader getOsdState() const;

  inline bool hasOsdWeight() const;
  inline  ::capnp::List< ::uint32_t>::Reader getOsdWeight() const;

  inline bool hasVolumes() const;
  inline  ::capnp::List< ::Captain::Volume>::Reader getVolumes() const;

  inline bool hasHbBackAddr() const;
  inline  ::capnp::List< ::Captain::EntityAddr>::Reader getHbBackAddr() const;

  inline bool hasOsdInfo() const;
  inline  ::capnp::List< ::Captain::OsdInfo>::Reader getOsdInfo() const;

  inline bool hasBlacklist() const;
  inline  ::capnp::List< ::Captain::EntityAddrUTimePair>::Reader getBlacklist() const;

  inline bool hasClusterAddr() const;
  inline  ::capnp::List< ::Captain::EntityAddr>::Reader getClusterAddr() const;

  inline bool hasOsdUuid() const;
  inline  ::capnp::List< ::Captain::Uuid>::Reader getOsdUuid() const;

  inline bool hasOsdXInfo() const;
  inline  ::capnp::List< ::Captain::OsdXInfo>::Reader getOsdXInfo() const;

  inline bool hasHbFrontAddr() const;
  inline  ::capnp::List< ::Captain::EntityAddr>::Reader getHbFrontAddr() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class OSDMap::Builder {
public:
  typedef OSDMap Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint8_t getStructV();
  inline void setStructV( ::uint8_t value);

  inline  ::uint8_t getStructCompat();
  inline void setStructCompat( ::uint8_t value);

  inline  ::uint32_t getStructLen();
  inline void setStructLen( ::uint32_t value);

  inline bool hasFsid();
  inline  ::Captain::Uuid::Builder getFsid();
  inline void setFsid( ::Captain::Uuid::Reader value);
  inline  ::Captain::Uuid::Builder initFsid();
  inline void adoptFsid(::capnp::Orphan< ::Captain::Uuid>&& value);
  inline ::capnp::Orphan< ::Captain::Uuid> disownFsid();

  inline bool hasEpoch();
  inline  ::Captain::Epoch::Builder getEpoch();
  inline void setEpoch( ::Captain::Epoch::Reader value);
  inline  ::Captain::Epoch::Builder initEpoch();
  inline void adoptEpoch(::capnp::Orphan< ::Captain::Epoch>&& value);
  inline ::capnp::Orphan< ::Captain::Epoch> disownEpoch();

  inline bool hasCreated();
  inline  ::Captain::UTime::Builder getCreated();
  inline void setCreated( ::Captain::UTime::Reader value);
  inline  ::Captain::UTime::Builder initCreated();
  inline void adoptCreated(::capnp::Orphan< ::Captain::UTime>&& value);
  inline ::capnp::Orphan< ::Captain::UTime> disownCreated();

  inline bool hasModified();
  inline  ::Captain::UTime::Builder getModified();
  inline void setModified( ::Captain::UTime::Reader value);
  inline  ::Captain::UTime::Builder initModified();
  inline void adoptModified(::capnp::Orphan< ::Captain::UTime>&& value);
  inline ::capnp::Orphan< ::Captain::UTime> disownModified();

  inline  ::uint32_t getFlags();
  inline void setFlags( ::uint32_t value);

  inline  ::int32_t getMaxOsd();
  inline void setMaxOsd( ::int32_t value);

  inline bool hasOsdState();
  inline  ::capnp::List< ::uint8_t>::Builder getOsdState();
  inline void setOsdState( ::capnp::List< ::uint8_t>::Reader value);
  inline void setOsdState(::kj::ArrayPtr<const  ::uint8_t> value);
  inline  ::capnp::List< ::uint8_t>::Builder initOsdState(unsigned int size);
  inline void adoptOsdState(::capnp::Orphan< ::capnp::List< ::uint8_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint8_t>> disownOsdState();

  inline bool hasOsdWeight();
  inline  ::capnp::List< ::uint32_t>::Builder getOsdWeight();
  inline void setOsdWeight( ::capnp::List< ::uint32_t>::Reader value);
  inline void setOsdWeight(::kj::ArrayPtr<const  ::uint32_t> value);
  inline  ::capnp::List< ::uint32_t>::Builder initOsdWeight(unsigned int size);
  inline void adoptOsdWeight(::capnp::Orphan< ::capnp::List< ::uint32_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint32_t>> disownOsdWeight();

  inline bool hasVolumes();
  inline  ::capnp::List< ::Captain::Volume>::Builder getVolumes();
  inline void setVolumes( ::capnp::List< ::Captain::Volume>::Reader value);
  inline  ::capnp::List< ::Captain::Volume>::Builder initVolumes(unsigned int size);
  inline void adoptVolumes(::capnp::Orphan< ::capnp::List< ::Captain::Volume>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Captain::Volume>> disownVolumes();

  inline bool hasHbBackAddr();
  inline  ::capnp::List< ::Captain::EntityAddr>::Builder getHbBackAddr();
  inline void setHbBackAddr( ::capnp::List< ::Captain::EntityAddr>::Reader value);
  inline  ::capnp::List< ::Captain::EntityAddr>::Builder initHbBackAddr(unsigned int size);
  inline void adoptHbBackAddr(::capnp::Orphan< ::capnp::List< ::Captain::EntityAddr>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Captain::EntityAddr>> disownHbBackAddr();

  inline bool hasOsdInfo();
  inline  ::capnp::List< ::Captain::OsdInfo>::Builder getOsdInfo();
  inline void setOsdInfo( ::capnp::List< ::Captain::OsdInfo>::Reader value);
  inline  ::capnp::List< ::Captain::OsdInfo>::Builder initOsdInfo(unsigned int size);
  inline void adoptOsdInfo(::capnp::Orphan< ::capnp::List< ::Captain::OsdInfo>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Captain::OsdInfo>> disownOsdInfo();

  inline bool hasBlacklist();
  inline  ::capnp::List< ::Captain::EntityAddrUTimePair>::Builder getBlacklist();
  inline void setBlacklist( ::capnp::List< ::Captain::EntityAddrUTimePair>::Reader value);
  inline  ::capnp::List< ::Captain::EntityAddrUTimePair>::Builder initBlacklist(unsigned int size);
  inline void adoptBlacklist(::capnp::Orphan< ::capnp::List< ::Captain::EntityAddrUTimePair>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Captain::EntityAddrUTimePair>> disownBlacklist();

  inline bool hasClusterAddr();
  inline  ::capnp::List< ::Captain::EntityAddr>::Builder getClusterAddr();
  inline void setClusterAddr( ::capnp::List< ::Captain::EntityAddr>::Reader value);
  inline  ::capnp::List< ::Captain::EntityAddr>::Builder initClusterAddr(unsigned int size);
  inline void adoptClusterAddr(::capnp::Orphan< ::capnp::List< ::Captain::EntityAddr>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Captain::EntityAddr>> disownClusterAddr();

  inline bool hasOsdUuid();
  inline  ::capnp::List< ::Captain::Uuid>::Builder getOsdUuid();
  inline void setOsdUuid( ::capnp::List< ::Captain::Uuid>::Reader value);
  inline  ::capnp::List< ::Captain::Uuid>::Builder initOsdUuid(unsigned int size);
  inline void adoptOsdUuid(::capnp::Orphan< ::capnp::List< ::Captain::Uuid>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Captain::Uuid>> disownOsdUuid();

  inline bool hasOsdXInfo();
  inline  ::capnp::List< ::Captain::OsdXInfo>::Builder getOsdXInfo();
  inline void setOsdXInfo( ::capnp::List< ::Captain::OsdXInfo>::Reader value);
  inline  ::capnp::List< ::Captain::OsdXInfo>::Builder initOsdXInfo(unsigned int size);
  inline void adoptOsdXInfo(::capnp::Orphan< ::capnp::List< ::Captain::OsdXInfo>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Captain::OsdXInfo>> disownOsdXInfo();

  inline bool hasHbFrontAddr();
  inline  ::capnp::List< ::Captain::EntityAddr>::Builder getHbFrontAddr();
  inline void setHbFrontAddr( ::capnp::List< ::Captain::EntityAddr>::Reader value);
  inline  ::capnp::List< ::Captain::EntityAddr>::Builder initHbFrontAddr(unsigned int size);
  inline void adoptHbFrontAddr(::capnp::Orphan< ::capnp::List< ::Captain::EntityAddr>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Captain::EntityAddr>> disownHbFrontAddr();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
};

#if !CAPNP_LITE
class OSDMap::Pipeline {
public:
  typedef OSDMap Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Captain::Uuid::Pipeline getFsid();
  inline  ::Captain::Epoch::Pipeline getEpoch();
  inline  ::Captain::UTime::Pipeline getCreated();
  inline  ::Captain::UTime::Pipeline getModified();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Uuid::Reader {
public:
  typedef Uuid Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasUuid() const;
  inline  ::capnp::Data::Reader getUuid() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Uuid::Builder {
public:
  typedef Uuid Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasUuid();
  inline  ::capnp::Data::Builder getUuid();
  inline void setUuid( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initUuid(unsigned int size);
  inline void adoptUuid(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownUuid();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
};

#if !CAPNP_LITE
class Uuid::Pipeline {
public:
  typedef Uuid Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Epoch::Reader {
public:
  typedef Epoch Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getEpoch() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Epoch::Builder {
public:
  typedef Epoch Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getEpoch();
  inline void setEpoch( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
};

#if !CAPNP_LITE
class Epoch::Pipeline {
public:
  typedef Epoch Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class UTime::Reader {
public:
  typedef UTime Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline Tv::Reader getTv() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class UTime::Builder {
public:
  typedef UTime Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline Tv::Builder getTv();
  inline Tv::Builder initTv();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
};

#if !CAPNP_LITE
class UTime::Pipeline {
public:
  typedef UTime Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline Tv::Pipeline getTv();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class UTime::Tv::Reader {
public:
  typedef Tv Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getTvSec() const;

  inline  ::uint32_t getTvNsec() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class UTime::Tv::Builder {
public:
  typedef Tv Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getTvSec();
  inline void setTvSec( ::uint32_t value);

  inline  ::uint32_t getTvNsec();
  inline void setTvNsec( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
};

#if !CAPNP_LITE
class UTime::Tv::Pipeline {
public:
  typedef Tv Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Volume::Reader {
public:
  typedef Volume Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::int32_t getVersion() const;

  inline  ::Captain::Volume::VolType getType() const;

  inline bool hasId() const;
  inline  ::Captain::Uuid::Reader getId() const;

  inline bool hasName() const;
  inline  ::capnp::Text::Reader getName() const;

  inline bool hasLastUpdate() const;
  inline  ::Captain::Epoch::Reader getLastUpdate() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Volume::Builder {
public:
  typedef Volume Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::int32_t getVersion();
  inline void setVersion( ::int32_t value);

  inline  ::Captain::Volume::VolType getType();
  inline void setType( ::Captain::Volume::VolType value);

  inline bool hasId();
  inline  ::Captain::Uuid::Builder getId();
  inline void setId( ::Captain::Uuid::Reader value);
  inline  ::Captain::Uuid::Builder initId();
  inline void adoptId(::capnp::Orphan< ::Captain::Uuid>&& value);
  inline ::capnp::Orphan< ::Captain::Uuid> disownId();

  inline bool hasName();
  inline  ::capnp::Text::Builder getName();
  inline void setName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initName(unsigned int size);
  inline void adoptName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownName();

  inline bool hasLastUpdate();
  inline  ::Captain::Epoch::Builder getLastUpdate();
  inline void setLastUpdate( ::Captain::Epoch::Reader value);
  inline  ::Captain::Epoch::Builder initLastUpdate();
  inline void adoptLastUpdate(::capnp::Orphan< ::Captain::Epoch>&& value);
  inline ::capnp::Orphan< ::Captain::Epoch> disownLastUpdate();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
};

#if !CAPNP_LITE
class Volume::Pipeline {
public:
  typedef Volume Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Captain::Uuid::Pipeline getId();
  inline  ::Captain::Epoch::Pipeline getLastUpdate();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class EntityAddr::Reader {
public:
  typedef EntityAddr Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getType() const;

  inline  ::uint32_t getNonce() const;

  inline bool hasAddr() const;
  inline  ::capnp::Data::Reader getAddr() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class EntityAddr::Builder {
public:
  typedef EntityAddr Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getType();
  inline void setType( ::uint32_t value);

  inline  ::uint32_t getNonce();
  inline void setNonce( ::uint32_t value);

  inline bool hasAddr();
  inline  ::capnp::Data::Builder getAddr();
  inline void setAddr( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initAddr(unsigned int size);
  inline void adoptAddr(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownAddr();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
};

#if !CAPNP_LITE
class EntityAddr::Pipeline {
public:
  typedef EntityAddr Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class SockAddrStorage::Reader {
public:
  typedef SockAddrStorage Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasData() const;
  inline  ::capnp::Data::Reader getData() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class SockAddrStorage::Builder {
public:
  typedef SockAddrStorage Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasData();
  inline  ::capnp::Data::Builder getData();
  inline void setData( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initData(unsigned int size);
  inline void adoptData(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownData();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
};

#if !CAPNP_LITE
class SockAddrStorage::Pipeline {
public:
  typedef SockAddrStorage Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class OsdInfo::Reader {
public:
  typedef OsdInfo Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasUpFrom() const;
  inline  ::Captain::Epoch::Reader getUpFrom() const;

  inline bool hasUpThru() const;
  inline  ::Captain::Epoch::Reader getUpThru() const;

  inline bool hasDownAt() const;
  inline  ::Captain::Epoch::Reader getDownAt() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class OsdInfo::Builder {
public:
  typedef OsdInfo Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasUpFrom();
  inline  ::Captain::Epoch::Builder getUpFrom();
  inline void setUpFrom( ::Captain::Epoch::Reader value);
  inline  ::Captain::Epoch::Builder initUpFrom();
  inline void adoptUpFrom(::capnp::Orphan< ::Captain::Epoch>&& value);
  inline ::capnp::Orphan< ::Captain::Epoch> disownUpFrom();

  inline bool hasUpThru();
  inline  ::Captain::Epoch::Builder getUpThru();
  inline void setUpThru( ::Captain::Epoch::Reader value);
  inline  ::Captain::Epoch::Builder initUpThru();
  inline void adoptUpThru(::capnp::Orphan< ::Captain::Epoch>&& value);
  inline ::capnp::Orphan< ::Captain::Epoch> disownUpThru();

  inline bool hasDownAt();
  inline  ::Captain::Epoch::Builder getDownAt();
  inline void setDownAt( ::Captain::Epoch::Reader value);
  inline  ::Captain::Epoch::Builder initDownAt();
  inline void adoptDownAt(::capnp::Orphan< ::Captain::Epoch>&& value);
  inline ::capnp::Orphan< ::Captain::Epoch> disownDownAt();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
};

#if !CAPNP_LITE
class OsdInfo::Pipeline {
public:
  typedef OsdInfo Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Captain::Epoch::Pipeline getUpFrom();
  inline  ::Captain::Epoch::Pipeline getUpThru();
  inline  ::Captain::Epoch::Pipeline getDownAt();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class EntityAddrUTimePair::Reader {
public:
  typedef EntityAddrUTimePair Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasEntityAddr() const;
  inline  ::Captain::EntityAddr::Reader getEntityAddr() const;

  inline bool hasTime() const;
  inline  ::Captain::UTime::Reader getTime() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class EntityAddrUTimePair::Builder {
public:
  typedef EntityAddrUTimePair Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasEntityAddr();
  inline  ::Captain::EntityAddr::Builder getEntityAddr();
  inline void setEntityAddr( ::Captain::EntityAddr::Reader value);
  inline  ::Captain::EntityAddr::Builder initEntityAddr();
  inline void adoptEntityAddr(::capnp::Orphan< ::Captain::EntityAddr>&& value);
  inline ::capnp::Orphan< ::Captain::EntityAddr> disownEntityAddr();

  inline bool hasTime();
  inline  ::Captain::UTime::Builder getTime();
  inline void setTime( ::Captain::UTime::Reader value);
  inline  ::Captain::UTime::Builder initTime();
  inline void adoptTime(::capnp::Orphan< ::Captain::UTime>&& value);
  inline ::capnp::Orphan< ::Captain::UTime> disownTime();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
};

#if !CAPNP_LITE
class EntityAddrUTimePair::Pipeline {
public:
  typedef EntityAddrUTimePair Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Captain::EntityAddr::Pipeline getEntityAddr();
  inline  ::Captain::UTime::Pipeline getTime();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class OsdXInfo::Reader {
public:
  typedef OsdXInfo Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasDownStamp() const;
  inline  ::Captain::UTime::Reader getDownStamp() const;

  inline  ::uint32_t getLaggyProbability() const;

  inline  ::uint32_t getLaggyInterval() const;

  inline  ::uint64_t getFeatures() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class OsdXInfo::Builder {
public:
  typedef OsdXInfo Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasDownStamp();
  inline  ::Captain::UTime::Builder getDownStamp();
  inline void setDownStamp( ::Captain::UTime::Reader value);
  inline  ::Captain::UTime::Builder initDownStamp();
  inline void adoptDownStamp(::capnp::Orphan< ::Captain::UTime>&& value);
  inline ::capnp::Orphan< ::Captain::UTime> disownDownStamp();

  inline  ::uint32_t getLaggyProbability();
  inline void setLaggyProbability( ::uint32_t value);

  inline  ::uint32_t getLaggyInterval();
  inline void setLaggyInterval( ::uint32_t value);

  inline  ::uint64_t getFeatures();
  inline void setFeatures( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
};

#if !CAPNP_LITE
class OsdXInfo::Pipeline {
public:
  typedef OsdXInfo Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Captain::UTime::Pipeline getDownStamp();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline  ::uint8_t OSDMap::Reader::getStructV() const {
  return _reader.getDataField< ::uint8_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint8_t OSDMap::Builder::getStructV() {
  return _builder.getDataField< ::uint8_t>(
      0 * ::capnp::ELEMENTS);
}
inline void OSDMap::Builder::setStructV( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t OSDMap::Reader::getStructCompat() const {
  return _reader.getDataField< ::uint8_t>(
      1 * ::capnp::ELEMENTS);
}

inline  ::uint8_t OSDMap::Builder::getStructCompat() {
  return _builder.getDataField< ::uint8_t>(
      1 * ::capnp::ELEMENTS);
}
inline void OSDMap::Builder::setStructCompat( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      1 * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t OSDMap::Reader::getStructLen() const {
  return _reader.getDataField< ::uint32_t>(
      1 * ::capnp::ELEMENTS);
}

inline  ::uint32_t OSDMap::Builder::getStructLen() {
  return _builder.getDataField< ::uint32_t>(
      1 * ::capnp::ELEMENTS);
}
inline void OSDMap::Builder::setStructLen( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      1 * ::capnp::ELEMENTS, value);
}

inline bool OSDMap::Reader::hasFsid() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool OSDMap::Builder::hasFsid() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::Captain::Uuid::Reader OSDMap::Reader::getFsid() const {
  return ::capnp::_::PointerHelpers< ::Captain::Uuid>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::Captain::Uuid::Builder OSDMap::Builder::getFsid() {
  return ::capnp::_::PointerHelpers< ::Captain::Uuid>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Captain::Uuid::Pipeline OSDMap::Pipeline::getFsid() {
  return  ::Captain::Uuid::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void OSDMap::Builder::setFsid( ::Captain::Uuid::Reader value) {
  ::capnp::_::PointerHelpers< ::Captain::Uuid>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::Captain::Uuid::Builder OSDMap::Builder::initFsid() {
  return ::capnp::_::PointerHelpers< ::Captain::Uuid>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void OSDMap::Builder::adoptFsid(
    ::capnp::Orphan< ::Captain::Uuid>&& value) {
  ::capnp::_::PointerHelpers< ::Captain::Uuid>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Captain::Uuid> OSDMap::Builder::disownFsid() {
  return ::capnp::_::PointerHelpers< ::Captain::Uuid>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool OSDMap::Reader::hasEpoch() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool OSDMap::Builder::hasEpoch() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::Captain::Epoch::Reader OSDMap::Reader::getEpoch() const {
  return ::capnp::_::PointerHelpers< ::Captain::Epoch>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::Captain::Epoch::Builder OSDMap::Builder::getEpoch() {
  return ::capnp::_::PointerHelpers< ::Captain::Epoch>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Captain::Epoch::Pipeline OSDMap::Pipeline::getEpoch() {
  return  ::Captain::Epoch::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void OSDMap::Builder::setEpoch( ::Captain::Epoch::Reader value) {
  ::capnp::_::PointerHelpers< ::Captain::Epoch>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::Captain::Epoch::Builder OSDMap::Builder::initEpoch() {
  return ::capnp::_::PointerHelpers< ::Captain::Epoch>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void OSDMap::Builder::adoptEpoch(
    ::capnp::Orphan< ::Captain::Epoch>&& value) {
  ::capnp::_::PointerHelpers< ::Captain::Epoch>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Captain::Epoch> OSDMap::Builder::disownEpoch() {
  return ::capnp::_::PointerHelpers< ::Captain::Epoch>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool OSDMap::Reader::hasCreated() const {
  return !_reader.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline bool OSDMap::Builder::hasCreated() {
  return !_builder.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline  ::Captain::UTime::Reader OSDMap::Reader::getCreated() const {
  return ::capnp::_::PointerHelpers< ::Captain::UTime>::get(
      _reader.getPointerField(2 * ::capnp::POINTERS));
}
inline  ::Captain::UTime::Builder OSDMap::Builder::getCreated() {
  return ::capnp::_::PointerHelpers< ::Captain::UTime>::get(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Captain::UTime::Pipeline OSDMap::Pipeline::getCreated() {
  return  ::Captain::UTime::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void OSDMap::Builder::setCreated( ::Captain::UTime::Reader value) {
  ::capnp::_::PointerHelpers< ::Captain::UTime>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline  ::Captain::UTime::Builder OSDMap::Builder::initCreated() {
  return ::capnp::_::PointerHelpers< ::Captain::UTime>::init(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
inline void OSDMap::Builder::adoptCreated(
    ::capnp::Orphan< ::Captain::UTime>&& value) {
  ::capnp::_::PointerHelpers< ::Captain::UTime>::adopt(
      _builder.getPointerField(2 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Captain::UTime> OSDMap::Builder::disownCreated() {
  return ::capnp::_::PointerHelpers< ::Captain::UTime>::disown(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}

inline bool OSDMap::Reader::hasModified() const {
  return !_reader.getPointerField(3 * ::capnp::POINTERS).isNull();
}
inline bool OSDMap::Builder::hasModified() {
  return !_builder.getPointerField(3 * ::capnp::POINTERS).isNull();
}
inline  ::Captain::UTime::Reader OSDMap::Reader::getModified() const {
  return ::capnp::_::PointerHelpers< ::Captain::UTime>::get(
      _reader.getPointerField(3 * ::capnp::POINTERS));
}
inline  ::Captain::UTime::Builder OSDMap::Builder::getModified() {
  return ::capnp::_::PointerHelpers< ::Captain::UTime>::get(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Captain::UTime::Pipeline OSDMap::Pipeline::getModified() {
  return  ::Captain::UTime::Pipeline(_typeless.getPointerField(3));
}
#endif  // !CAPNP_LITE
inline void OSDMap::Builder::setModified( ::Captain::UTime::Reader value) {
  ::capnp::_::PointerHelpers< ::Captain::UTime>::set(
      _builder.getPointerField(3 * ::capnp::POINTERS), value);
}
inline  ::Captain::UTime::Builder OSDMap::Builder::initModified() {
  return ::capnp::_::PointerHelpers< ::Captain::UTime>::init(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}
inline void OSDMap::Builder::adoptModified(
    ::capnp::Orphan< ::Captain::UTime>&& value) {
  ::capnp::_::PointerHelpers< ::Captain::UTime>::adopt(
      _builder.getPointerField(3 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Captain::UTime> OSDMap::Builder::disownModified() {
  return ::capnp::_::PointerHelpers< ::Captain::UTime>::disown(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}

inline  ::uint32_t OSDMap::Reader::getFlags() const {
  return _reader.getDataField< ::uint32_t>(
      2 * ::capnp::ELEMENTS);
}

inline  ::uint32_t OSDMap::Builder::getFlags() {
  return _builder.getDataField< ::uint32_t>(
      2 * ::capnp::ELEMENTS);
}
inline void OSDMap::Builder::setFlags( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      2 * ::capnp::ELEMENTS, value);
}

inline  ::int32_t OSDMap::Reader::getMaxOsd() const {
  return _reader.getDataField< ::int32_t>(
      3 * ::capnp::ELEMENTS);
}

inline  ::int32_t OSDMap::Builder::getMaxOsd() {
  return _builder.getDataField< ::int32_t>(
      3 * ::capnp::ELEMENTS);
}
inline void OSDMap::Builder::setMaxOsd( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      3 * ::capnp::ELEMENTS, value);
}

inline bool OSDMap::Reader::hasOsdState() const {
  return !_reader.getPointerField(4 * ::capnp::POINTERS).isNull();
}
inline bool OSDMap::Builder::hasOsdState() {
  return !_builder.getPointerField(4 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint8_t>::Reader OSDMap::Reader::getOsdState() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t>>::get(
      _reader.getPointerField(4 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint8_t>::Builder OSDMap::Builder::getOsdState() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t>>::get(
      _builder.getPointerField(4 * ::capnp::POINTERS));
}
inline void OSDMap::Builder::setOsdState( ::capnp::List< ::uint8_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t>>::set(
      _builder.getPointerField(4 * ::capnp::POINTERS), value);
}
inline void OSDMap::Builder::setOsdState(::kj::ArrayPtr<const  ::uint8_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t>>::set(
      _builder.getPointerField(4 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint8_t>::Builder OSDMap::Builder::initOsdState(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t>>::init(
      _builder.getPointerField(4 * ::capnp::POINTERS), size);
}
inline void OSDMap::Builder::adoptOsdState(
    ::capnp::Orphan< ::capnp::List< ::uint8_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t>>::adopt(
      _builder.getPointerField(4 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint8_t>> OSDMap::Builder::disownOsdState() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t>>::disown(
      _builder.getPointerField(4 * ::capnp::POINTERS));
}

inline bool OSDMap::Reader::hasOsdWeight() const {
  return !_reader.getPointerField(5 * ::capnp::POINTERS).isNull();
}
inline bool OSDMap::Builder::hasOsdWeight() {
  return !_builder.getPointerField(5 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint32_t>::Reader OSDMap::Reader::getOsdWeight() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t>>::get(
      _reader.getPointerField(5 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint32_t>::Builder OSDMap::Builder::getOsdWeight() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t>>::get(
      _builder.getPointerField(5 * ::capnp::POINTERS));
}
inline void OSDMap::Builder::setOsdWeight( ::capnp::List< ::uint32_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t>>::set(
      _builder.getPointerField(5 * ::capnp::POINTERS), value);
}
inline void OSDMap::Builder::setOsdWeight(::kj::ArrayPtr<const  ::uint32_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t>>::set(
      _builder.getPointerField(5 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint32_t>::Builder OSDMap::Builder::initOsdWeight(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t>>::init(
      _builder.getPointerField(5 * ::capnp::POINTERS), size);
}
inline void OSDMap::Builder::adoptOsdWeight(
    ::capnp::Orphan< ::capnp::List< ::uint32_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t>>::adopt(
      _builder.getPointerField(5 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint32_t>> OSDMap::Builder::disownOsdWeight() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t>>::disown(
      _builder.getPointerField(5 * ::capnp::POINTERS));
}

inline bool OSDMap::Reader::hasVolumes() const {
  return !_reader.getPointerField(6 * ::capnp::POINTERS).isNull();
}
inline bool OSDMap::Builder::hasVolumes() {
  return !_builder.getPointerField(6 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Captain::Volume>::Reader OSDMap::Reader::getVolumes() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Captain::Volume>>::get(
      _reader.getPointerField(6 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Captain::Volume>::Builder OSDMap::Builder::getVolumes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Captain::Volume>>::get(
      _builder.getPointerField(6 * ::capnp::POINTERS));
}
inline void OSDMap::Builder::setVolumes( ::capnp::List< ::Captain::Volume>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Captain::Volume>>::set(
      _builder.getPointerField(6 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Captain::Volume>::Builder OSDMap::Builder::initVolumes(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Captain::Volume>>::init(
      _builder.getPointerField(6 * ::capnp::POINTERS), size);
}
inline void OSDMap::Builder::adoptVolumes(
    ::capnp::Orphan< ::capnp::List< ::Captain::Volume>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Captain::Volume>>::adopt(
      _builder.getPointerField(6 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Captain::Volume>> OSDMap::Builder::disownVolumes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Captain::Volume>>::disown(
      _builder.getPointerField(6 * ::capnp::POINTERS));
}

inline bool OSDMap::Reader::hasHbBackAddr() const {
  return !_reader.getPointerField(7 * ::capnp::POINTERS).isNull();
}
inline bool OSDMap::Builder::hasHbBackAddr() {
  return !_builder.getPointerField(7 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Captain::EntityAddr>::Reader OSDMap::Reader::getHbBackAddr() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Captain::EntityAddr>>::get(
      _reader.getPointerField(7 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Captain::EntityAddr>::Builder OSDMap::Builder::getHbBackAddr() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Captain::EntityAddr>>::get(
      _builder.getPointerField(7 * ::capnp::POINTERS));
}
inline void OSDMap::Builder::setHbBackAddr( ::capnp::List< ::Captain::EntityAddr>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Captain::EntityAddr>>::set(
      _builder.getPointerField(7 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Captain::EntityAddr>::Builder OSDMap::Builder::initHbBackAddr(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Captain::EntityAddr>>::init(
      _builder.getPointerField(7 * ::capnp::POINTERS), size);
}
inline void OSDMap::Builder::adoptHbBackAddr(
    ::capnp::Orphan< ::capnp::List< ::Captain::EntityAddr>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Captain::EntityAddr>>::adopt(
      _builder.getPointerField(7 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Captain::EntityAddr>> OSDMap::Builder::disownHbBackAddr() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Captain::EntityAddr>>::disown(
      _builder.getPointerField(7 * ::capnp::POINTERS));
}

inline bool OSDMap::Reader::hasOsdInfo() const {
  return !_reader.getPointerField(8 * ::capnp::POINTERS).isNull();
}
inline bool OSDMap::Builder::hasOsdInfo() {
  return !_builder.getPointerField(8 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Captain::OsdInfo>::Reader OSDMap::Reader::getOsdInfo() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Captain::OsdInfo>>::get(
      _reader.getPointerField(8 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Captain::OsdInfo>::Builder OSDMap::Builder::getOsdInfo() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Captain::OsdInfo>>::get(
      _builder.getPointerField(8 * ::capnp::POINTERS));
}
inline void OSDMap::Builder::setOsdInfo( ::capnp::List< ::Captain::OsdInfo>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Captain::OsdInfo>>::set(
      _builder.getPointerField(8 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Captain::OsdInfo>::Builder OSDMap::Builder::initOsdInfo(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Captain::OsdInfo>>::init(
      _builder.getPointerField(8 * ::capnp::POINTERS), size);
}
inline void OSDMap::Builder::adoptOsdInfo(
    ::capnp::Orphan< ::capnp::List< ::Captain::OsdInfo>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Captain::OsdInfo>>::adopt(
      _builder.getPointerField(8 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Captain::OsdInfo>> OSDMap::Builder::disownOsdInfo() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Captain::OsdInfo>>::disown(
      _builder.getPointerField(8 * ::capnp::POINTERS));
}

inline bool OSDMap::Reader::hasBlacklist() const {
  return !_reader.getPointerField(9 * ::capnp::POINTERS).isNull();
}
inline bool OSDMap::Builder::hasBlacklist() {
  return !_builder.getPointerField(9 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Captain::EntityAddrUTimePair>::Reader OSDMap::Reader::getBlacklist() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Captain::EntityAddrUTimePair>>::get(
      _reader.getPointerField(9 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Captain::EntityAddrUTimePair>::Builder OSDMap::Builder::getBlacklist() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Captain::EntityAddrUTimePair>>::get(
      _builder.getPointerField(9 * ::capnp::POINTERS));
}
inline void OSDMap::Builder::setBlacklist( ::capnp::List< ::Captain::EntityAddrUTimePair>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Captain::EntityAddrUTimePair>>::set(
      _builder.getPointerField(9 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Captain::EntityAddrUTimePair>::Builder OSDMap::Builder::initBlacklist(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Captain::EntityAddrUTimePair>>::init(
      _builder.getPointerField(9 * ::capnp::POINTERS), size);
}
inline void OSDMap::Builder::adoptBlacklist(
    ::capnp::Orphan< ::capnp::List< ::Captain::EntityAddrUTimePair>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Captain::EntityAddrUTimePair>>::adopt(
      _builder.getPointerField(9 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Captain::EntityAddrUTimePair>> OSDMap::Builder::disownBlacklist() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Captain::EntityAddrUTimePair>>::disown(
      _builder.getPointerField(9 * ::capnp::POINTERS));
}

inline bool OSDMap::Reader::hasClusterAddr() const {
  return !_reader.getPointerField(10 * ::capnp::POINTERS).isNull();
}
inline bool OSDMap::Builder::hasClusterAddr() {
  return !_builder.getPointerField(10 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Captain::EntityAddr>::Reader OSDMap::Reader::getClusterAddr() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Captain::EntityAddr>>::get(
      _reader.getPointerField(10 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Captain::EntityAddr>::Builder OSDMap::Builder::getClusterAddr() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Captain::EntityAddr>>::get(
      _builder.getPointerField(10 * ::capnp::POINTERS));
}
inline void OSDMap::Builder::setClusterAddr( ::capnp::List< ::Captain::EntityAddr>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Captain::EntityAddr>>::set(
      _builder.getPointerField(10 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Captain::EntityAddr>::Builder OSDMap::Builder::initClusterAddr(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Captain::EntityAddr>>::init(
      _builder.getPointerField(10 * ::capnp::POINTERS), size);
}
inline void OSDMap::Builder::adoptClusterAddr(
    ::capnp::Orphan< ::capnp::List< ::Captain::EntityAddr>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Captain::EntityAddr>>::adopt(
      _builder.getPointerField(10 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Captain::EntityAddr>> OSDMap::Builder::disownClusterAddr() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Captain::EntityAddr>>::disown(
      _builder.getPointerField(10 * ::capnp::POINTERS));
}

inline bool OSDMap::Reader::hasOsdUuid() const {
  return !_reader.getPointerField(11 * ::capnp::POINTERS).isNull();
}
inline bool OSDMap::Builder::hasOsdUuid() {
  return !_builder.getPointerField(11 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Captain::Uuid>::Reader OSDMap::Reader::getOsdUuid() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Captain::Uuid>>::get(
      _reader.getPointerField(11 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Captain::Uuid>::Builder OSDMap::Builder::getOsdUuid() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Captain::Uuid>>::get(
      _builder.getPointerField(11 * ::capnp::POINTERS));
}
inline void OSDMap::Builder::setOsdUuid( ::capnp::List< ::Captain::Uuid>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Captain::Uuid>>::set(
      _builder.getPointerField(11 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Captain::Uuid>::Builder OSDMap::Builder::initOsdUuid(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Captain::Uuid>>::init(
      _builder.getPointerField(11 * ::capnp::POINTERS), size);
}
inline void OSDMap::Builder::adoptOsdUuid(
    ::capnp::Orphan< ::capnp::List< ::Captain::Uuid>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Captain::Uuid>>::adopt(
      _builder.getPointerField(11 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Captain::Uuid>> OSDMap::Builder::disownOsdUuid() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Captain::Uuid>>::disown(
      _builder.getPointerField(11 * ::capnp::POINTERS));
}

inline bool OSDMap::Reader::hasOsdXInfo() const {
  return !_reader.getPointerField(12 * ::capnp::POINTERS).isNull();
}
inline bool OSDMap::Builder::hasOsdXInfo() {
  return !_builder.getPointerField(12 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Captain::OsdXInfo>::Reader OSDMap::Reader::getOsdXInfo() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Captain::OsdXInfo>>::get(
      _reader.getPointerField(12 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Captain::OsdXInfo>::Builder OSDMap::Builder::getOsdXInfo() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Captain::OsdXInfo>>::get(
      _builder.getPointerField(12 * ::capnp::POINTERS));
}
inline void OSDMap::Builder::setOsdXInfo( ::capnp::List< ::Captain::OsdXInfo>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Captain::OsdXInfo>>::set(
      _builder.getPointerField(12 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Captain::OsdXInfo>::Builder OSDMap::Builder::initOsdXInfo(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Captain::OsdXInfo>>::init(
      _builder.getPointerField(12 * ::capnp::POINTERS), size);
}
inline void OSDMap::Builder::adoptOsdXInfo(
    ::capnp::Orphan< ::capnp::List< ::Captain::OsdXInfo>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Captain::OsdXInfo>>::adopt(
      _builder.getPointerField(12 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Captain::OsdXInfo>> OSDMap::Builder::disownOsdXInfo() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Captain::OsdXInfo>>::disown(
      _builder.getPointerField(12 * ::capnp::POINTERS));
}

inline bool OSDMap::Reader::hasHbFrontAddr() const {
  return !_reader.getPointerField(13 * ::capnp::POINTERS).isNull();
}
inline bool OSDMap::Builder::hasHbFrontAddr() {
  return !_builder.getPointerField(13 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Captain::EntityAddr>::Reader OSDMap::Reader::getHbFrontAddr() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Captain::EntityAddr>>::get(
      _reader.getPointerField(13 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Captain::EntityAddr>::Builder OSDMap::Builder::getHbFrontAddr() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Captain::EntityAddr>>::get(
      _builder.getPointerField(13 * ::capnp::POINTERS));
}
inline void OSDMap::Builder::setHbFrontAddr( ::capnp::List< ::Captain::EntityAddr>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Captain::EntityAddr>>::set(
      _builder.getPointerField(13 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Captain::EntityAddr>::Builder OSDMap::Builder::initHbFrontAddr(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Captain::EntityAddr>>::init(
      _builder.getPointerField(13 * ::capnp::POINTERS), size);
}
inline void OSDMap::Builder::adoptHbFrontAddr(
    ::capnp::Orphan< ::capnp::List< ::Captain::EntityAddr>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Captain::EntityAddr>>::adopt(
      _builder.getPointerField(13 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Captain::EntityAddr>> OSDMap::Builder::disownHbFrontAddr() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Captain::EntityAddr>>::disown(
      _builder.getPointerField(13 * ::capnp::POINTERS));
}

inline bool Uuid::Reader::hasUuid() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool Uuid::Builder::hasUuid() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader Uuid::Reader::getUuid() const {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder Uuid::Builder::getUuid() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Uuid::Builder::setUuid( ::capnp::Data::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder Uuid::Builder::initUuid(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void Uuid::Builder::adoptUuid(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> Uuid::Builder::disownUuid() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline  ::uint32_t Epoch::Reader::getEpoch() const {
  return _reader.getDataField< ::uint32_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint32_t Epoch::Builder::getEpoch() {
  return _builder.getDataField< ::uint32_t>(
      0 * ::capnp::ELEMENTS);
}
inline void Epoch::Builder::setEpoch( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline UTime::Tv::Reader UTime::Reader::getTv() const {
  return UTime::Tv::Reader(_reader);
}
inline UTime::Tv::Builder UTime::Builder::getTv() {
  return UTime::Tv::Builder(_builder);
}
#if !CAPNP_LITE
inline UTime::Tv::Pipeline UTime::Pipeline::getTv() {
  return UTime::Tv::Pipeline(_typeless.noop());
}
#endif  // !CAPNP_LITE
inline UTime::Tv::Builder UTime::Builder::initTv() {
  _builder.setDataField< ::uint32_t>(0 * ::capnp::ELEMENTS, 0);
  _builder.setDataField< ::uint32_t>(1 * ::capnp::ELEMENTS, 0);
  return UTime::Tv::Builder(_builder);
}
inline  ::uint32_t UTime::Tv::Reader::getTvSec() const {
  return _reader.getDataField< ::uint32_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint32_t UTime::Tv::Builder::getTvSec() {
  return _builder.getDataField< ::uint32_t>(
      0 * ::capnp::ELEMENTS);
}
inline void UTime::Tv::Builder::setTvSec( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t UTime::Tv::Reader::getTvNsec() const {
  return _reader.getDataField< ::uint32_t>(
      1 * ::capnp::ELEMENTS);
}

inline  ::uint32_t UTime::Tv::Builder::getTvNsec() {
  return _builder.getDataField< ::uint32_t>(
      1 * ::capnp::ELEMENTS);
}
inline void UTime::Tv::Builder::setTvNsec( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      1 * ::capnp::ELEMENTS, value);
}

inline  ::int32_t Volume::Reader::getVersion() const {
  return _reader.getDataField< ::int32_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::int32_t Volume::Builder::getVersion() {
  return _builder.getDataField< ::int32_t>(
      0 * ::capnp::ELEMENTS);
}
inline void Volume::Builder::setVersion( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline  ::Captain::Volume::VolType Volume::Reader::getType() const {
  return _reader.getDataField< ::Captain::Volume::VolType>(
      2 * ::capnp::ELEMENTS);
}

inline  ::Captain::Volume::VolType Volume::Builder::getType() {
  return _builder.getDataField< ::Captain::Volume::VolType>(
      2 * ::capnp::ELEMENTS);
}
inline void Volume::Builder::setType( ::Captain::Volume::VolType value) {
  _builder.setDataField< ::Captain::Volume::VolType>(
      2 * ::capnp::ELEMENTS, value);
}

inline bool Volume::Reader::hasId() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool Volume::Builder::hasId() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::Captain::Uuid::Reader Volume::Reader::getId() const {
  return ::capnp::_::PointerHelpers< ::Captain::Uuid>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::Captain::Uuid::Builder Volume::Builder::getId() {
  return ::capnp::_::PointerHelpers< ::Captain::Uuid>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Captain::Uuid::Pipeline Volume::Pipeline::getId() {
  return  ::Captain::Uuid::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Volume::Builder::setId( ::Captain::Uuid::Reader value) {
  ::capnp::_::PointerHelpers< ::Captain::Uuid>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::Captain::Uuid::Builder Volume::Builder::initId() {
  return ::capnp::_::PointerHelpers< ::Captain::Uuid>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Volume::Builder::adoptId(
    ::capnp::Orphan< ::Captain::Uuid>&& value) {
  ::capnp::_::PointerHelpers< ::Captain::Uuid>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Captain::Uuid> Volume::Builder::disownId() {
  return ::capnp::_::PointerHelpers< ::Captain::Uuid>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool Volume::Reader::hasName() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool Volume::Builder::hasName() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Volume::Reader::getName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Volume::Builder::getName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void Volume::Builder::setName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Volume::Builder::initName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void Volume::Builder::adoptName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Volume::Builder::disownName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool Volume::Reader::hasLastUpdate() const {
  return !_reader.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline bool Volume::Builder::hasLastUpdate() {
  return !_builder.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline  ::Captain::Epoch::Reader Volume::Reader::getLastUpdate() const {
  return ::capnp::_::PointerHelpers< ::Captain::Epoch>::get(
      _reader.getPointerField(2 * ::capnp::POINTERS));
}
inline  ::Captain::Epoch::Builder Volume::Builder::getLastUpdate() {
  return ::capnp::_::PointerHelpers< ::Captain::Epoch>::get(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Captain::Epoch::Pipeline Volume::Pipeline::getLastUpdate() {
  return  ::Captain::Epoch::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void Volume::Builder::setLastUpdate( ::Captain::Epoch::Reader value) {
  ::capnp::_::PointerHelpers< ::Captain::Epoch>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline  ::Captain::Epoch::Builder Volume::Builder::initLastUpdate() {
  return ::capnp::_::PointerHelpers< ::Captain::Epoch>::init(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
inline void Volume::Builder::adoptLastUpdate(
    ::capnp::Orphan< ::Captain::Epoch>&& value) {
  ::capnp::_::PointerHelpers< ::Captain::Epoch>::adopt(
      _builder.getPointerField(2 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Captain::Epoch> Volume::Builder::disownLastUpdate() {
  return ::capnp::_::PointerHelpers< ::Captain::Epoch>::disown(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}

inline  ::uint32_t EntityAddr::Reader::getType() const {
  return _reader.getDataField< ::uint32_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint32_t EntityAddr::Builder::getType() {
  return _builder.getDataField< ::uint32_t>(
      0 * ::capnp::ELEMENTS);
}
inline void EntityAddr::Builder::setType( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t EntityAddr::Reader::getNonce() const {
  return _reader.getDataField< ::uint32_t>(
      1 * ::capnp::ELEMENTS);
}

inline  ::uint32_t EntityAddr::Builder::getNonce() {
  return _builder.getDataField< ::uint32_t>(
      1 * ::capnp::ELEMENTS);
}
inline void EntityAddr::Builder::setNonce( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      1 * ::capnp::ELEMENTS, value);
}

inline bool EntityAddr::Reader::hasAddr() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool EntityAddr::Builder::hasAddr() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader EntityAddr::Reader::getAddr() const {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder EntityAddr::Builder::getAddr() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void EntityAddr::Builder::setAddr( ::capnp::Data::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder EntityAddr::Builder::initAddr(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void EntityAddr::Builder::adoptAddr(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> EntityAddr::Builder::disownAddr() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool SockAddrStorage::Reader::hasData() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool SockAddrStorage::Builder::hasData() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader SockAddrStorage::Reader::getData() const {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder SockAddrStorage::Builder::getData() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void SockAddrStorage::Builder::setData( ::capnp::Data::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder SockAddrStorage::Builder::initData(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void SockAddrStorage::Builder::adoptData(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> SockAddrStorage::Builder::disownData() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool OsdInfo::Reader::hasUpFrom() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool OsdInfo::Builder::hasUpFrom() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::Captain::Epoch::Reader OsdInfo::Reader::getUpFrom() const {
  return ::capnp::_::PointerHelpers< ::Captain::Epoch>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::Captain::Epoch::Builder OsdInfo::Builder::getUpFrom() {
  return ::capnp::_::PointerHelpers< ::Captain::Epoch>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Captain::Epoch::Pipeline OsdInfo::Pipeline::getUpFrom() {
  return  ::Captain::Epoch::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void OsdInfo::Builder::setUpFrom( ::Captain::Epoch::Reader value) {
  ::capnp::_::PointerHelpers< ::Captain::Epoch>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::Captain::Epoch::Builder OsdInfo::Builder::initUpFrom() {
  return ::capnp::_::PointerHelpers< ::Captain::Epoch>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void OsdInfo::Builder::adoptUpFrom(
    ::capnp::Orphan< ::Captain::Epoch>&& value) {
  ::capnp::_::PointerHelpers< ::Captain::Epoch>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Captain::Epoch> OsdInfo::Builder::disownUpFrom() {
  return ::capnp::_::PointerHelpers< ::Captain::Epoch>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool OsdInfo::Reader::hasUpThru() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool OsdInfo::Builder::hasUpThru() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::Captain::Epoch::Reader OsdInfo::Reader::getUpThru() const {
  return ::capnp::_::PointerHelpers< ::Captain::Epoch>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::Captain::Epoch::Builder OsdInfo::Builder::getUpThru() {
  return ::capnp::_::PointerHelpers< ::Captain::Epoch>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Captain::Epoch::Pipeline OsdInfo::Pipeline::getUpThru() {
  return  ::Captain::Epoch::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void OsdInfo::Builder::setUpThru( ::Captain::Epoch::Reader value) {
  ::capnp::_::PointerHelpers< ::Captain::Epoch>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::Captain::Epoch::Builder OsdInfo::Builder::initUpThru() {
  return ::capnp::_::PointerHelpers< ::Captain::Epoch>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void OsdInfo::Builder::adoptUpThru(
    ::capnp::Orphan< ::Captain::Epoch>&& value) {
  ::capnp::_::PointerHelpers< ::Captain::Epoch>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Captain::Epoch> OsdInfo::Builder::disownUpThru() {
  return ::capnp::_::PointerHelpers< ::Captain::Epoch>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool OsdInfo::Reader::hasDownAt() const {
  return !_reader.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline bool OsdInfo::Builder::hasDownAt() {
  return !_builder.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline  ::Captain::Epoch::Reader OsdInfo::Reader::getDownAt() const {
  return ::capnp::_::PointerHelpers< ::Captain::Epoch>::get(
      _reader.getPointerField(2 * ::capnp::POINTERS));
}
inline  ::Captain::Epoch::Builder OsdInfo::Builder::getDownAt() {
  return ::capnp::_::PointerHelpers< ::Captain::Epoch>::get(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Captain::Epoch::Pipeline OsdInfo::Pipeline::getDownAt() {
  return  ::Captain::Epoch::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void OsdInfo::Builder::setDownAt( ::Captain::Epoch::Reader value) {
  ::capnp::_::PointerHelpers< ::Captain::Epoch>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline  ::Captain::Epoch::Builder OsdInfo::Builder::initDownAt() {
  return ::capnp::_::PointerHelpers< ::Captain::Epoch>::init(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
inline void OsdInfo::Builder::adoptDownAt(
    ::capnp::Orphan< ::Captain::Epoch>&& value) {
  ::capnp::_::PointerHelpers< ::Captain::Epoch>::adopt(
      _builder.getPointerField(2 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Captain::Epoch> OsdInfo::Builder::disownDownAt() {
  return ::capnp::_::PointerHelpers< ::Captain::Epoch>::disown(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}

inline bool EntityAddrUTimePair::Reader::hasEntityAddr() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool EntityAddrUTimePair::Builder::hasEntityAddr() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::Captain::EntityAddr::Reader EntityAddrUTimePair::Reader::getEntityAddr() const {
  return ::capnp::_::PointerHelpers< ::Captain::EntityAddr>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::Captain::EntityAddr::Builder EntityAddrUTimePair::Builder::getEntityAddr() {
  return ::capnp::_::PointerHelpers< ::Captain::EntityAddr>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Captain::EntityAddr::Pipeline EntityAddrUTimePair::Pipeline::getEntityAddr() {
  return  ::Captain::EntityAddr::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void EntityAddrUTimePair::Builder::setEntityAddr( ::Captain::EntityAddr::Reader value) {
  ::capnp::_::PointerHelpers< ::Captain::EntityAddr>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::Captain::EntityAddr::Builder EntityAddrUTimePair::Builder::initEntityAddr() {
  return ::capnp::_::PointerHelpers< ::Captain::EntityAddr>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void EntityAddrUTimePair::Builder::adoptEntityAddr(
    ::capnp::Orphan< ::Captain::EntityAddr>&& value) {
  ::capnp::_::PointerHelpers< ::Captain::EntityAddr>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Captain::EntityAddr> EntityAddrUTimePair::Builder::disownEntityAddr() {
  return ::capnp::_::PointerHelpers< ::Captain::EntityAddr>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool EntityAddrUTimePair::Reader::hasTime() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool EntityAddrUTimePair::Builder::hasTime() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::Captain::UTime::Reader EntityAddrUTimePair::Reader::getTime() const {
  return ::capnp::_::PointerHelpers< ::Captain::UTime>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::Captain::UTime::Builder EntityAddrUTimePair::Builder::getTime() {
  return ::capnp::_::PointerHelpers< ::Captain::UTime>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Captain::UTime::Pipeline EntityAddrUTimePair::Pipeline::getTime() {
  return  ::Captain::UTime::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void EntityAddrUTimePair::Builder::setTime( ::Captain::UTime::Reader value) {
  ::capnp::_::PointerHelpers< ::Captain::UTime>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::Captain::UTime::Builder EntityAddrUTimePair::Builder::initTime() {
  return ::capnp::_::PointerHelpers< ::Captain::UTime>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void EntityAddrUTimePair::Builder::adoptTime(
    ::capnp::Orphan< ::Captain::UTime>&& value) {
  ::capnp::_::PointerHelpers< ::Captain::UTime>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Captain::UTime> EntityAddrUTimePair::Builder::disownTime() {
  return ::capnp::_::PointerHelpers< ::Captain::UTime>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool OsdXInfo::Reader::hasDownStamp() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool OsdXInfo::Builder::hasDownStamp() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::Captain::UTime::Reader OsdXInfo::Reader::getDownStamp() const {
  return ::capnp::_::PointerHelpers< ::Captain::UTime>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::Captain::UTime::Builder OsdXInfo::Builder::getDownStamp() {
  return ::capnp::_::PointerHelpers< ::Captain::UTime>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Captain::UTime::Pipeline OsdXInfo::Pipeline::getDownStamp() {
  return  ::Captain::UTime::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void OsdXInfo::Builder::setDownStamp( ::Captain::UTime::Reader value) {
  ::capnp::_::PointerHelpers< ::Captain::UTime>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::Captain::UTime::Builder OsdXInfo::Builder::initDownStamp() {
  return ::capnp::_::PointerHelpers< ::Captain::UTime>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void OsdXInfo::Builder::adoptDownStamp(
    ::capnp::Orphan< ::Captain::UTime>&& value) {
  ::capnp::_::PointerHelpers< ::Captain::UTime>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Captain::UTime> OsdXInfo::Builder::disownDownStamp() {
  return ::capnp::_::PointerHelpers< ::Captain::UTime>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline  ::uint32_t OsdXInfo::Reader::getLaggyProbability() const {
  return _reader.getDataField< ::uint32_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint32_t OsdXInfo::Builder::getLaggyProbability() {
  return _builder.getDataField< ::uint32_t>(
      0 * ::capnp::ELEMENTS);
}
inline void OsdXInfo::Builder::setLaggyProbability( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t OsdXInfo::Reader::getLaggyInterval() const {
  return _reader.getDataField< ::uint32_t>(
      1 * ::capnp::ELEMENTS);
}

inline  ::uint32_t OsdXInfo::Builder::getLaggyInterval() {
  return _builder.getDataField< ::uint32_t>(
      1 * ::capnp::ELEMENTS);
}
inline void OsdXInfo::Builder::setLaggyInterval( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      1 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t OsdXInfo::Reader::getFeatures() const {
  return _reader.getDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS);
}

inline  ::uint64_t OsdXInfo::Builder::getFeatures() {
  return _builder.getDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS);
}
inline void OsdXInfo::Builder::setFeatures( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS, value);
}

}  // namespace

#endif  // CAPNP_INCLUDED_afd07975e4b248c8_
